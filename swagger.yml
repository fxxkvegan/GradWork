openapi: 3.0.0
info:
  title: App Catalog API
  description: >
    RESTful API for an application catalog platform that lets users discover, review
    and manage mobile / desktop apps.
    This spec is derived from initial product notes and refined following common REST
    best‑practices (resource‑oriented URIs, nouns for resources, HTTP verbs for actions,
    plural collection names, and standard HTTP response codes).
  version: "1.0.0"
servers:
  - url: https://api.example.com/v1
    description: Production
  - url: https://sandbox.api.example.com/v1
    description: Sandbox
tags:
  - name: Products
    description: Manage apps that are listed in the catalog
  - name: Reviews
  - name: Users
  - name: Home
security:
  - bearerAuth: []
paths:
  /products:
    get:
      tags: [Products]
      summary: List / search products
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - in: query
          name: q
          schema:
            type: string
          description: Keyword search
        - in: query
          name: sort
          schema:
            type: string
            enum: [new, topRated, trending, access]
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
    post:
      tags: [Products]
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /products/{productId}:
    parameters:
      - $ref: "#/components/parameters/ProductId"
    get:
      tags: [Products]
      summary: Get product detail
      responses:
        200:
          description: Product detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    put:
      tags: [Products]
      security:
        - bearerAuth: []
      summary: Update a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdate"
      responses:
        200:
          description: Updated product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    delete:
      tags: [Products]
      security:
        - bearerAuth: []
      summary: Delete a product
      responses:
        204:
          description: Deleted
  /products/{productId}/versions:
    parameters:
      - $ref: "#/components/parameters/ProductId"
    get:
      tags: [Products]
      summary: Version history
      responses:
        200:
          description: List of versions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionList"
  /rankings:
    get:
      tags: [Rankings]
      summary: Get rankings
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [access, new, topRated, trending]
      responses:
        200:
          description: Ranking result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RankingList"
  /products/{productId}/reviews:
    parameters:
      - $ref: "#/components/parameters/ProductId"
    get:
      tags: [Reviews]
      summary: List reviews for a product
      responses:
        200:
          description: Reviews list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewList"
    post:
      tags: [Reviews]
      security:
        - bearerAuth: []
      summary: Post a review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCreate"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
  /reviews/{reviewId}:
    parameters:
      - $ref: "#/components/parameters/ReviewId"
    put:
      tags: [Reviews]
      security:
        - bearerAuth: []
      summary: Edit review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewUpdate"
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
    delete:
      tags: [Reviews]
      security:
        - bearerAuth: []
      summary: Delete review
      responses:
        204:
          description: Deleted
  /users/me/reviews:
    get:
      tags: [Reviews, Users]
      security:
        - bearerAuth: []
      summary: List my reviews
      responses:
        200:
          description: My reviews
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewList"
  /reviews/{reviewId}/vote:
    parameters:
      - $ref: "#/components/parameters/ReviewId"
    post:
      tags: [Reviews]
      security:
        - bearerAuth: []
      summary: Vote helpful
      responses:
        204:
          description: Voted
  /auth/login:
    post:
      tags: [Users]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [email, password]
      responses:
        200:
          description: Login success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
  /auth/signup:
    post:
      tags: [Users]
      summary: Sign‑up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/me:
    get:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Get my profile
      responses:
        200:
          description: Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Update my profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        200:
          description: Updated profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/me/settings:
    get:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Get settings
      responses:
        200:
          description: Settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
    put:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Update settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettings"
      responses:
        200:
          description: Updated
  /users/me/history:
    get:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: View history
      responses:
        200:
          description: Browsing history
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoryList"
  /reviews/{reviewId}/responses:
    parameters:
      - $ref: "#/components/parameters/ReviewId"
    get:
      tags: [Reviews]
      summary: Get review responses
      responses:
        200:
          description: Responses
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponseList"
    post:
      tags: [Reviews]
      security:
        - bearerAuth: []
      summary: Post review response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewResponseCreate"
      responses:
        201:
          description: Created
  /products/{productId}/status:
    parameters:
      - $ref: "#/components/parameters/ProductId"
    get:
      tags: [Products]
      summary: Deployment / maintenance status
      responses:
        200:
          description: Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductStatus"
  /home:
    get:
      tags: [Home]
      summary: Aggregated data for landing page
      responses:
        200:
          description: Home data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HomeData"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    ProductId:
      name: productId
      in: path
      required: true
      schema:
        type: string
    ReviewId:
      name: reviewId
      in: path
      required: true
      schema:
        type: string
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        rating:
          type: number
          format: float
        downloadCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, name]
    ProductCreate:
      allOf:
        - $ref: "#/components/schemas/Product"
      required: [name, description]
    ProductUpdate:
      allOf:
        - $ref: "#/components/schemas/Product"
    ProductList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        total:
          type: integer
    VersionList:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              version:
                type: string
              releaseNotes:
                type: string
              releasedAt:
                type: string
                format: date-time
    RankingList:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              rank:
                type: integer
              product:
                $ref: "#/components/schemas/Product"
              score:
                type: number
    Review:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        authorId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        title:
          type: string
        body:
          type: string
        helpfulCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, productId, authorId, rating, body]
    ReviewCreate:
      type: object
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        title:
          type: string
        body:
          type: string
      required: [rating, body]
    ReviewUpdate:
      allOf:
        - $ref: "#/components/schemas/ReviewCreate"
    ReviewList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        total:
          type: integer
    ReviewResponseCreate:
      type: object
      properties:
        body:
          type: string
      required: [body]
    ReviewResponseList:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              reviewId:
                type: string
              authorId:
                type: string
              body:
                type: string
              createdAt:
                type: string
                format: date-time
    AuthToken:
      type: object
      properties:
        token:
          type: string
      required: [token]
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        avatarUrl:
          type: string
          format: uri
        locale:
          type: string
        theme:
          type: string
      required: [id, name, email]
    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [name, email, password]
    UserUpdate:
      allOf:
        - $ref: "#/components/schemas/User"
    UserSettings:
      type: object
      properties:
        locale:
          type: string
        theme:
          type: string
    HistoryList:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              viewedAt:
                type: string
                format: date-time
    ProductStatus:
      type: object
      properties:
        status:
          type: string
          enum: [online, maintenance, deprecated]
        message:
          type: string
        updatedAt:
          type: string
          format: date-time
    HomeData:
      type: object
      properties:
        topRanked:
          $ref: "#/components/schemas/ProductList"
        trending:
          $ref: "#/components/schemas/ProductList"
